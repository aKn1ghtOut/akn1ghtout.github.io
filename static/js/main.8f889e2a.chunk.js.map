{"version":3,"sources":["Tile.js","App.js","serviceWorker.js","index.js"],"names":["degToRad","deg","Tile","React","memo","x","y","z","posx","posy","alt","className","src","style","left","bottom","App","props","state","latitude","longitude","zoom","tiles","moveX","moveY","sec","degrad","Math","cos","getTiles","bind","moveUp","moveDown","moveLeft","moveRight","zoomIn","zoomOut","this","pow","log","tan","x1","floor","y1","i","j","push","setState","onClick","id","transform","map","obj","key","position","top","borderRadius","height","width","backgroundColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8f889e2a.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Tile.css\";\n\nexport const degToRad = deg => 0.0174533 * deg;\n\nexport const Tile = React.memo(({ x, y, z, posx, posy }) => {\n\treturn (\n\t\t<img \n\t\t\talt=\"MapTile\"\n\t\t\tclassName=\"mapTile\"\n\t\t\tsrc={`https://maps.wikimedia.org/osm-intl/${z}/${x}/${y}.png`}\n\t\t\tstyle={{\n\t\t\t\tleft: (posx * 150) + \"px\",\n\t\t\t\tbottom: (posy * 150) + \"px\"\n\t\t\t}}\n\t\t/>\n\t);\n});","import React, { Component } from 'react';\n\nimport { Tile, degToRad } from \"./Tile\";\nimport './App.css';\n\nclass App extends Component {\n\tstate = {\n\t\tlatitude: 20.5937,\n\t\tlongitude: 78.9629,\n\t\tzoom: 8,\n\t\ttiles: [],\n\t\tmoveX: 0,\n\t\tmoveY: 0\n\t}\n\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.getTiles = this.getTiles.bind(this);\n\t\tthis.moveUp = this.moveUp.bind(this);\n\t\tthis.moveDown = this.moveDown.bind(this);\n\t\tthis.moveLeft = this.moveLeft.bind(this);\n\t\tthis.moveRight = this.moveRight.bind(this);\n\t\tthis.zoomIn = this.zoomIn.bind(this);\n\t\tthis.zoomOut = this.zoomOut.bind(this);\n\t}\n\n\tsec = degrad => (1 / Math.cos(degrad));\n\n\tcomponentDidMount()\n\t{\n\t\tthis.getTiles();\n\t}\n\n\tgetTiles()\n\t{\n\t\tconst tilesize = 150;\n\n\t\tconst { latitude, longitude, zoom } = this.state;\n\t\tlet z\t=\tMath.pow(2, zoom);\n\t\tlet x\t= \tz * ((longitude + 180) / 360);\n\t\tlet y\t= \tz * (1 - (Math.log(Math.tan(degToRad(latitude)) + this.sec(degToRad(latitude))) / (22/7))) / 2;\n\n\t\tlet x1 = Math.floor(x);\n\t\tlet y1 = Math.floor(y);\n\n\t\tconst tiles = [];\n\t\tfor(let i = x1 - 2; i <= x1 + 2; i++)\n\t\t{\n\t\t\tfor(let j = y1 - 2; j <= y1 + 2; j++)\n\t\t\t{\n\t\t\t\ttiles.push({\n\t\t\t\t\tx : i,\n\t\t\t\t\ty : j,\n\t\t\t\t\tz : zoom,\n\t\t\t\t\tposx: i - x1 + 2,\n\t\t\t\t\tposy: y1 - j + 2\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\ttiles: tiles,\n\t\t\t\tmoveX: (x - x1) * tilesize,\n\t\t\t\tmoveY: (y - y1) * tilesize\n\t\t\t}\n\t\t);\n\t}\n\n\tmoveUp(){\n\t\tthis.setState({\n\t\t\tlatitude: this.state.latitude + (1 / this.state.zoom)\n\t\t});\n\t\tthis.getTiles();\n\t}\n\n\tmoveDown(){\n\t\tthis.setState({\n\t\t\tlatitude: this.state.latitude - (1 / this.state.zoom)\n\t\t});\n\t\tthis.getTiles();\n\t}\n\n\tmoveLeft(){\n\t\tthis.setState({\n\t\t\tlongitude: this.state.longitude - (1 / this.state.zoom)\n\t\t});\n\t\tthis.getTiles();\n\t}\n\n\tmoveRight(){\n\t\tthis.setState({\n\t\t\tlongitude: this.state.longitude + (1 / this.state.zoom)\n\t\t});\n\t\tthis.getTiles();\n\t}\n\n\tzoomIn(){\n\t\tthis.setState({\n\t\t\tzoom: this.state.zoom + 1\n\t\t});\n\t\tthis.getTiles();\n\t}\n\n\tzoomOut(){\n\t\tthis.setState({\n\t\t\tzoom: this.state.zoom - 1\n\t\t});\n\t\tthis.getTiles();\n\t}\n\t\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>OSM Tiles Map Rendered demo</h1>\n\t\t\t\t<table>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td><strong>Latitude</strong></td>\n\t\t\t\t\t\t<td><strong>Longitude</strong></td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>{this.state.latitude}</td>\n\t\t\t\t\t\t<td>{this.state.longitude}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<button onClick={this.moveLeft}>Move Left</button>\n\t\t\t\t\t\t\t<button onClick={this.moveRight}>Move Right</button>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<button onClick={this.moveUp}>Move Up</button>\n\t\t\t\t\t\t\t<button onClick={this.moveDown}>Move Down</button>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr><tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<button onClick={this.zoomIn}>Zoom in</button>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<button onClick={this.zoomOut}>Zoom Out</button>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t\t<div id=\"container\">\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"maps_container\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\ttransform: `translateX(-${this.state.moveX}px) translateY(-${this.state.moveY}px)`\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.tiles.map( (obj, i) => (<Tile key={i} zoom={this.state.zoom} {...obj}></Tile>))\n\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div \n\t\t\t\t\t\tid=\"marker\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\t\tleft: \"50%\",\n\t\t\t\t\t\t\ttop: \"50%\",\n\t\t\t\t\t\t\ttransform: \"translateX(-50%) translateY(-50%)\",\n\t\t\t\t\t\t\tborderRadius: \"10px\",\n\t\t\t\t\t\t\theight: \"20px\",\n\t\t\t\t\t\t\twidth: \"20px\",\n\t\t\t\t\t\t\tbackgroundColor: \"blue\"\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}