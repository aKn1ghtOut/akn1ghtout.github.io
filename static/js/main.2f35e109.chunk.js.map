{"version":3,"sources":["logo.svg","Tile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","degToRad","deg","Tile","React","memo","x","y","z","posx","posy","alt","className","src","style","left","top","App","props","getTiles","bind","this","state","latitude","longitude","zoom","Math","pow","log","tan","sec","round","tiles","i","j","push","setState","id","map","obj","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,4ICI9BC,G,MAAW,SAAAC,GAAG,MAAI,SAAYA,IAE9BC,EAAOC,IAAMC,MAAK,YAA8B,IAA3BC,EAA0B,EAA1BA,EAAGC,EAAuB,EAAvBA,EAAGC,EAAoB,EAApBA,EAAGC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAChD,OACC,yBACCC,IAAI,UACJC,UAAU,UACVC,IAAG,8CAAyCL,EAAzC,YAA8CF,EAA9C,YAAmDC,EAAnD,QACHO,MAAO,CACNC,KAAc,GAAPN,EAAa,IACpBO,IAAa,GAAPN,EAAa,UCRjBO,G,8DAQL,WAAYC,GACX,IAAD,8BACC,cAAMA,IACDC,SAAW,EAAKA,SAASC,KAAd,gBAFjB,E,uDAMC,IAAD,EACuCC,KAAKC,MAAnCC,EADT,EACSA,SAAUC,EADnB,EACmBA,UAAWC,EAD9B,EAC8BA,KACvBjB,EAAIkB,KAAKC,IAAI,EAAGF,GAChBnB,EAAKE,IAAMgB,EAAY,KAAO,KAC9BjB,EAAKC,GAAK,EAAKkB,KAAKE,IAAIF,KAAKG,IAAI5B,EAASsB,IAAaG,KAAKI,IAAI7B,EAASsB,MAAe,GAAG,IAAO,EAEvG,iBAADjB,EAAIoB,KAAKK,MAAMzB,GACd,iBAADC,EAAImB,KAAKK,MAAMxB,GAGf,IADA,IAAMyB,EAAQ,GACNC,EAAI3B,EAAI,EAAG2B,GAAK3B,EAAE,EAAG2B,IAE5B,IAAI,IAAIC,EAAI3B,EAAI,EAAG2B,GAAK3B,EAAE,EAAG2B,IAE5BF,EAAMG,KAAK,CACV7B,EAAI2B,EACJ1B,EAAI2B,EACJ1B,EAAIA,EACJC,KAAMwB,EAAI3B,EAAI,EACdI,KAAMH,EAAI2B,EAAI,IAKjBb,KAAKe,SAAS,CAACJ,MAAOA,M,+BAGd,IAAD,OACP,OACC,yBAAKpB,UAAU,OACd,yBAAKyB,GAAG,aACP,2DACA,yBAAKzB,UAAU,kBAEdS,KAAKC,MAAMU,MAAMM,KAAK,SAAAC,GAAG,OAAK,kBAAC,EAAD,eAAMd,KAAM,EAAKH,MAAMG,MAAUc,c,GAjDnDC,cAAZvB,EACEK,MAAQ,CACdC,SAAU,EACVC,UAAW,EACXC,KAAM,EACNO,MAAO,IAqDMf,QCpDKwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2f35e109.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nimport \"./Tile.css\";\n\nexport const degToRad = deg => 0.0174533 * deg;\n\nexport const Tile = React.memo(({ x, y, z, posx, posy }) => {\n\treturn (\n\t\t<img \n\t\t\talt=\"MapTile\"\n\t\t\tclassName=\"mapTile\"\n\t\t\tsrc={`https://maps.wikimedia.org/osm-intl/${z}/${x}/${y}.png`}\n\t\t\tstyle={{\n\t\t\t\tleft: (posx * 25) + \"%\",\n\t\t\t\ttop: (posy * 25) + \"%\"\n\t\t\t}}\n\t\t/>\n\t);\n});","import React, { Component } from 'react';\n\nimport { Tile, degToRad } from \"./Tile\"\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\tstatic state = {\n\t\tlatitude: 0,\n\t\tlongitude: 0,\n\t\tzoom: 8,\n\t\ttiles: []\n\t}\n\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.getTiles = this.getTiles.bind(this);\n\t}\n\n\tgetTiles()\n\t{\n\t\tconst { latitude, longitude, zoom } = this.state;\n\t\tconst z\t=\tMath.pow(2, zoom);\n\t\tconst x\t= \tz * ((longitude + 180) / 360);\n\t\tconst y\t= \tz * (1 - (Math.log(Math.tan(degToRad(latitude)) + Math.sec(degToRad(latitude))) / (22/7))) / 2;\n\n\t\tx = Math.round(x);\n\t\ty = Math.round(y);\n\n\t\tconst tiles = [];\n\t\tfor(let i = x - 2; i <= x+2; i++)\n\t\t{\n\t\t\tfor(let j = y - 2; j <= y+2; j++)\n\t\t\t{\n\t\t\t\ttiles.push({\n\t\t\t\t\tx : i,\n\t\t\t\t\ty : j,\n\t\t\t\t\tz : z,\n\t\t\t\t\tposx: i - x + 2,\n\t\t\t\t\tposy: y - j + 2\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({tiles: tiles});\n\t}\n\t\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div id=\"container\">\n\t\t\t\t\t<h1>OSM Tiles Map Rendered demo</h1>\n\t\t\t\t\t<div className=\"maps_container\">\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.tiles.map( obj => (<Tile zoom={this.state.zoom} {...obj}></Tile>))\n\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}